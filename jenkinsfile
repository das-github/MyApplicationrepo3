properties([pipelineTriggers([githubPush()])])

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                echo 'GIT Checkout'
                git changelog: false, credentialsId: 'Github', poll: false, url: 'https://github.com/das-github/MyApplicationrepo3.git'
            }
        }
        stage('Build') {
            steps {
                echo 'Maven Build'
                sh 'mvn clean install -f MyWebApp/pom.xml'
            }
        }
        stage('Test') {
            steps {
                echo 'JUnit Test'
                  sh 'mvn -Dmaven.test.failure.ignore=true install' 
            }
            post {
                success {
                    junit 'target/surefire-reports/**/*.xml' 
                }
            }
        }
        stage('Code Quality') {
            steps {
                echo 'SonarQube'
                withSonarQubeEnv('SonarQube') {
                sh 'mvn -f MyWebApp/pom.xml sonar:sonar'
                }
            }
        }
        stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
           }
        }
        stage('Artifact Upload') {
            steps {
                echo 'Nexus Upload'
                nexusArtifactUploader artifacts: [[artifactId: 'MyWebApp', classifier: '', file: 'MyWebApp/target/MyWebApp.war', type: 'war']], credentialsId: 'Nexus', groupId: 'myGroupId', nexusUrl: '192.168.0.240:8081/', nexusVersion: 'nexus3', protocol: 'http', repository: 'maven-snapshots', version: '1.0-SNAPSHOT'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploy to Tomcat'
                sshagent(['deploy_user']) {
                    sh 'scp /var/lib/jenkins/workspace/mywebapp/MyWebApp/target/MyWebApp.war http://192.168.0.85:8080:/opt/tomcat/apache-tomcat-9.0.43/webapps/'
                }
            }
        }
        post {
        success {
          // publish html
        publishHTML (target : [allowMissing: false,
         alwaysLinkToLastBuild: true,
         keepAll: true,
         reportDir: 'reports',
         reportFiles: 'myreport.html',
         reportName: 'My Reports',
         reportTitles: 'The Report'])
        }
      }
     post {
        always {
            echo "Send notifications for result: ${currentBuild.result}"
            }
        }
    }
}
